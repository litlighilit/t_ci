name: docs

# yamllint disable-line rule:truthy
env:
  nim-version: 'stable'
  devel-branch: master
  base-deploy-dir: ${{ github.workspace }}/.gh-pages
  lib-deploy-subdir: Lib
  devel-deploy-subdir: devel
on:
  push:
    branches:
      - master
      #${{ env.devel-branch }}

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for all branches and tags
    - name: Cache nimble
      id: cache-nimble
      uses: actions/cache@v4
      with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-v2-${{ hashFiles('*.nimble') }}
          restore-keys: |
            ${{ runner.os }}-nimble-v2-
    - uses: jiro4989/setup-nim-action@v2
      with:
        nim-version: ${{ env.nim-version }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Filter unbuilt tags and remove unused directories
      run: |
        # Define a reusable function for generating documentation
        generate_docs() {
          local git_url_arg="--git.url:https://github.com/${{ github.repository }} --git.commit:${{ env.devel-branch }}"
          local subdir=$1
          echo "Generating documentation for $subdir"
          rm -rf "${{ env.base-deploy-dir }}/$subdir"
          local deploy_dir=${{ env.base-deploy-dir }}/$subdir
          nimble testDoc --index:on --project $git_url_arg --outdir:$deploy_dir -d:homepage="${{ github.event.repository.homepage }}"
          nimble testLibDoc $git_url_arg --outdir:$deploy_dir/${{ env.lib-deploy-subdir }}
          # Copy to index.html
          cp $deploy_dir/${{ github.event.repository.name }}.html $deploy_dir/index.html
          git log -1 --format=%H > $deploy_dir/COMMIT
        }
        # List all v* tags in the repository
        all_tags=$(git tag -l 'v*.*'|sort -V)

        # List all existing directories in the deploy directory
        if [ -d ${{ env.base-deploy-dir }} ]; then
          cd ${{ env.base-deploy-dir }}
          existing_dirs=$(for dir in v*.*; do
            if [ -d $dir -a "$(cat $dir/COMMIT 2>/dev/null)" = "$(git rev-list -n 1 $dir)" ];then
              echo "$dir";
            fi
          done | sort -V)
          cd -
        else
          mkdir -p ${{ env.base-deploy-dir }}
          existing_dirs=""
        fi

        # Find tags that don't have corresponding directories by comparing sorted lists of tags and directories
        unbuilt_tags=$(comm -23 <(echo "$all_tags") <(echo "$existing_dirs"))

        echo "existing_dirs: $existing_dirs"
        echo "all_tags: $all_tags"

        # Find directories that are not in the list of tags
        unused_dirs=$(comm -13 <(echo "$all_tags") <(echo "$existing_dirs"))

        # Remove unused directories
        if [ -n "$unused_dirs" ]; then
          echo "Removing unused directories: $unused_dirs"
          for dir in $unused_dirs; do
            rm -rf ${{ env.base-deploy-dir }}/$dir
          done
        fi

        generate_docs ${{ env.devel-deploy-subdir }}
        # Generate documentation for unbuilt tags
        if [ -n "$unbuilt_tags" ]; then
          echo "Generating documentation for unbuilt tags: $unbuilt_tags"
          for tag in $unbuilt_tags; do
            git switch --detach $tag
            generate_docs $tag
          done
        fi
        git switch ${{ env.devel-branch }}

    - name: "CNAME"
      run: |
        cname=$(echo ${{ github.event.repository.homepage }} | grep -oP 'https?://\K[^/]+')
        prefix="docs."
        # py: if cname.startswith(prefix)
        # bash: if [[ "${cname}" != $prefix* ]]
        if [ ${cname##$prefix} = $cname ]; then  
            cname="${prefix}${cname}"
        fi
        # Dynamically generate the CNAME file to configure a custom domain for GitHub Pages.
        # This ensures the domain matches the repository's homepage URL, allowing proper redirection.
        # We generate CNAME here to use ${{ github.event.repository.homepage }}
    - name: Create symlinks for all items in /stable to /
      if: env.deploy_subdir != ${{ env.devel-deploy-subdir }}
      run: |
        # Create symlink from /stable to lastest version
        cd ${{ env.base-deploy-dir }}
        latest_tag=$(ls -d v*.* 2>/dev/null | sort -V | tail -n 1)
        cd -
        if [ "$latest_tag" = "v*.*" ]; then
          echo "no release document build found"
        else
          echo "lastest_tag: $latest_tag"
          rm -f ${{ env.base-deploy-dir }}/stable
          ln -s `realpath ${{ env.base-deploy-dir }}/$latest-tag` ${{ env.base-deploy-dir }}/stable

          # Re-create / items from /stable
          find ${{ env.base-deploy-dir }} -maxdepth 1 -type l -exec rm -f {} \;
          find ${{ env.base-deploy-dir }}/stable -mindepth 1 -maxdepth 1 -exec ln -s {} ${{ env.base-deploy-dir }}/ \;
        fi
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.base-deploy-dir }}

  deploy-docs:
    needs: build-docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
