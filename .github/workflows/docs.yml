name: docs

# yamllint disable-line rule:truthy
env:
  nim-version: 'stable'
  devel-branch: master
  git-url-arg: --git.url:https://github.com/${{ github.repository }} --git.commit:"${{ env.devel-branch }}"
  base-deploy-dir: ${{ github.workspace }}/.gh-pages
  lib-deploy-subdir: Lib
  devel-deploy-subdir: devel
on:
  push:
    branches:
      - ${{ env.devel-branch }}

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Cache nimble
      id: cache-nimble
      uses: actions/cache@v4
      with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble
    - uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: ${{ env.nim-version }}
    - name: Filter unbuilt tags and remove unused directories
      run: |
        # Define a reusable function for generating documentation
        generate_docs() {
          local subdir=$1
          echo "Generating documentation for $subdir"
          rm -rf "${{ env.base-deploy-dir }}/$subdir"
          local deploy-dir=${{ env.base-deploy-dir }}/$subdir
          nimble testDoc --index:on --project ${{ env.git-url-arg }} --outdir:$deploy-dir -d:homepage="${{ github.event.repository.homepage }}"
          nimble testLibDoc ${{ env.git-url-arg }} --outdir:$deploy-dir/${{ env.lib-deploy-subdir }}
          # Copy to index.html
          cp $deploy-dir/${{ github.event.repository.name }}.html $deploy-dir/index.html
        }
        # List all v* tags in the repository
        all_tags=$(git tag -l 'v*')

        # List all existing directories in the deploy directory
        existing_dirs=$(for dir in ${{ env.base-deploy-dir }}/v*; do basename "$dir"; done)

        # Find tags that don't have corresponding directories
        # Find tags that don't have corresponding directories by comparing sorted lists of tags and directories
        unbuilt_tags=$(comm -23 <(echo "$all_tags" | sort) <(echo "$existing_dirs" | sort))

        # Find directories that are not in the list of tags
        unused_dirs=$(comm -13 <(echo "$all_tags" | sort) <(echo "$existing_dirs" | sort))

        # Remove unused directories
        if [ -n "$unused_dirs" ]; then
          echo "Removing unused directories: $unused_dirs"
          for dir in $unused_dirs; do
            rm -rf ${{ env.base-deploy-dir }}/$dir
          done
        fi

        generate_docs ${{ env.devel-deploy-subdir }}
        # Generate documentation for unbuilt tags
        if [ -n "$unbuilt_tags" ]; then
          echo "Generating documentation for unbuilt tags: $unbuilt_tags"
          for tag in $unbuilt_tags; do
            git checkout $tag
            generate_docs $tag
          done
        fi
        git checkout ${{ env.devel-branch }}

    - name: "CNAME"
      run: |
        cname=$(echo ${{ github.event.repository.homepage }} | grep -oP 'https?://\K[^/]+')
        prefix="docs."
        # py: if cname.startswith(prefix)
        # bash: if [[ "${cname}" != $prefix* ]]
        if [ ${cname##$prefix} = $cname ]; then  
            cname="${prefix}${cname}"
        fi
        # Dynamically generate the CNAME file to configure a custom domain for GitHub Pages.
        # This ensures the domain matches the repository's homepage URL, allowing proper redirection.
        # We generate CNAME here to use ${{ github.event.repository.homepage }}
    - name: Create symlinks for all items in /stable to /
      if: env.deploy_subdir != ${{ env.devel-deploy-subdir }}
      run: |
        # Create symlink from /stable to lastest version
        latest_tag=$(ls -d ${{ env.deploy-dir }}/v* 2>/dev/null | sort -V | tail -n 1 | xargs -n 1 basename)
        rm -f ${{ env.base-deploy-dir }}/stable
        ln -s ${{ env.base-deploy-dir }}/$latest-tag ${{ env.base-deploy-dir }}/stable

        # Re-create / items from /stable
        find ${{ env.base-deploy-dir }} -maxdepth 1 -type l -exec rm -f {} \;
        find ${{ env.base-deploy-dir }}/stable -mindepth 1 -maxdepth 1 -exec ln -s {} ${{ env.base-deploy-dir }}/ \;
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.base-deploy-dir }}

  deploy-docs:
    needs: build-docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

